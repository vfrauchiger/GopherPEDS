package main

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/cavaliercoder/grab"
)

// Document struct for json document list
// from USPTO Peds
type Document struct {
	ApplId    string    `json:"applicationNumberText"`
	MRDate    time.Time `json:"mailRoomDate"`
	DocCode   string    `json:"documentCode"`
	DocDesc   string    `json:"documentDescription"`
	DocCate   string    `json:"documentCategory"`
	AccessLev string    `json:"accessLevelCategory"`
	DocIdent  string    `json:"documentIdentifier"`
	PagCount  int       `json:"pageCount"`
	PdfURL    string    `json:"pdfUrl"`
}

type AutoGenerated struct {
	QueryResults struct {
		IndexLastUpdatedDate string `json:"indexLastUpdatedDate"`
		SearchResponse       struct {
			ResponseHeader struct {
				ZkConnected bool `json:"zkConnected"`
				Status      int  `json:"status"`
				QTime       int  `json:"QTime"`
			} `json:"responseHeader"`
			Response struct {
				NumFound      int  `json:"numFound"`
				Start         int  `json:"start"`
				NumFoundExact bool `json:"numFoundExact"`
				Docs          []struct {
					CorrAddrCountryName string `json:"corrAddrCountryName"`
					ApplID              string `json:"applId"`
					TotalPtoDays        string `json:"totalPtoDays"`
					Assignments         []struct {
						ReelNumber           string `json:"reelNumber"`
						FrameNumber          string `json:"frameNumber"`
						AddressNameText      string `json:"addressNameText"`
						AddressLineOneText   string `json:"addressLineOneText"`
						AddressLineTwoText   string `json:"addressLineTwoText"`
						AddressLineThreeText string `json:"addressLineThreeText"`
						AddressLineFourText  string `json:"addressLineFourText"`
						MailDate             string `json:"mailDate"`
						ReceivedDate         string `json:"receivedDate"`
						RecordedDate         string `json:"recordedDate"`
						PagesCount           string `json:"pagesCount"`
						ConveryanceName      string `json:"converyanceName"`
						SequenceNumber       string `json:"sequenceNumber"`
						Assignors            []struct {
							AssignorName string `json:"assignorName"`
							ExecDate     string `json:"execDate"`
						} `json:"assignors"`
						Assignee []struct {
							AssigneeName      string `json:"assigneeName"`
							StreetLineOneText string `json:"streetLineOneText"`
							StreetLineTwoText string `json:"streetLineTwoText"`
							CityName          string `json:"cityName"`
							CountryCode       string `json:"countryCode"`
							PostalCode        string `json:"postalCode"`
						} `json:"assignee"`
					} `json:"assignments"`
					AppFilingDate          time.Time `json:"appFilingDate"`
					AppExamName            string    `json:"appExamName"`
					AppExamNameFacet       string    `json:"appExamNameFacet"`
					PublicInd              string    `json:"publicInd"`
					AppInd                 string    `json:"APP_IND"`
					InventorName           string    `json:"inventorName"`
					InventorNameFacet      string    `json:"inventorNameFacet"`
					AppEarlyPubDate        time.Time `json:"appEarlyPubDate"`
					CorrAddrGeoRegionCode  string    `json:"corrAddrGeoRegionCode"`
					AppLocation            string    `json:"appLocation"`
					AppEarlyPubNumber      string    `json:"appEarlyPubNumber"`
					ID                     string    `json:"id"`
					AppGrpArtNumber        string    `json:"appGrpArtNumber"`
					AppGrpArtNumberFacet   string    `json:"appGrpArtNumberFacet"`
					ApplIDStr              string    `json:"applIdStr"`
					ApplIDTxt              string    `json:"appl_id_txt"`
					InventorsFullName      []string  `json:"inventorsFullName"`
					InventorsFullNameFacet string    `json:"inventorsFullNameFacet"`
					AppSubCls              string    `json:"appSubCls"`
					PatentNumber           string    `json:"patentNumber"`
					LastModTs              time.Time `json:"LAST_MOD_TS"`
					Transactions           []struct {
						RecordDate  string `json:"recordDate"`
						Code        string `json:"code"`
						Description string `json:"description"`
					} `json:"transactions"`
					LastInsertTime    time.Time `json:"LAST_INSERT_TIME"`
					AppCls            string    `json:"appCls"`
					AppStatus         string    `json:"appStatus"`
					AppStatusFacet    string    `json:"appStatusFacet"`
					AppStatusTxt      string    `json:"appStatus_txt"`
					PtaPteInd         string    `json:"ptaPteInd"`
					PtaPteTranHistory []struct {
						Number              string `json:"number"`
						PtaOrPteDate        string `json:"ptaOrPteDate"`
						ContentsDescription string `json:"contentsDescription"`
						PtoDays             string `json:"ptoDays"`
						ApplDays            string `json:"applDays"`
						Start               string `json:"start"`
					} `json:"ptaPteTranHistory"`
					PatentTitle       string    `json:"patentTitle"`
					ApplDelay         string    `json:"applDelay"`
					CDelay            string    `json:"cDelay"`
					AppStatusDate     time.Time `json:"appStatusDate"`
					AppAttrDockNumber string    `json:"appAttrDockNumber"`
					Inventors         []struct {
						NameLineOne string `json:"nameLineOne"`
						NameLineTwo string `json:"nameLineTwo"`
						Suffix      string `json:"suffix"`
						StreetOne   string `json:"streetOne"`
						StreetTwo   string `json:"streetTwo"`
						City        string `json:"city"`
						GeoCode     string `json:"geoCode"`
						Country     string `json:"country"`
						RankNo      string `json:"rankNo"`
					} `json:"inventors"`
					InventorsFacet        string    `json:"inventorsFacet"`
					PtoAdjustments        string    `json:"ptoAdjustments"`
					CorrAddrStreetLineOne string    `json:"corrAddrStreetLineOne"`
					FirstInventorFile     string    `json:"firstInventorFile"`
					OverlapDelay          string    `json:"overlapDelay"`
					ADelay                string    `json:"aDelay"`
					AppType               string    `json:"appType"`
					AppTypeFacet          string    `json:"appTypeFacet"`
					CorrAddrPostalCode    string    `json:"corrAddrPostalCode"`
					AppCustNumber         string    `json:"appCustNumber"`
					AppClsSubCls          string    `json:"appClsSubCls"`
					AppClsSubClsFacet     string    `json:"appClsSubClsFacet"`
					PatentIssueDate       time.Time `json:"patentIssueDate"`
					BDelay                string    `json:"bDelay"`
					CorrAddrNameLineOne   string    `json:"corrAddrNameLineOne"`
					AttrnyAddr            []struct {
						ApplicationID  interface{} `json:"applicationId"`
						RegistrationNo string      `json:"registrationNo"`
						FullName       string      `json:"fullName"`
						PhoneNum       string      `json:"phoneNum"`
						RegStatus      string      `json:"regStatus"`
					} `json:"attrnyAddr"`
					ParentContinuity []struct {
						ClaimApplicationNumberText   string `json:"claimApplicationNumberText"`
						ApplicationNumberText        string `json:"applicationNumberText"`
						FilingDate                   string `json:"filingDate"`
						AiaIndicator                 string `json:"aiaIndicator"`
						PatentNumberText             string `json:"patentNumberText"`
						ApplicationStatus            string `json:"applicationStatus"`
						ApplicationStatusDescription string `json:"applicationStatusDescription"`
					} `json:"parentContinuity"`
					CorrAddrCustNo         string    `json:"corrAddrCustNo"`
					CorrAddrCountryCd      string    `json:"corrAddrCountryCd"`
					PtoDelay               string    `json:"ptoDelay"`
					CorrAddrCity           string    `json:"corrAddrCity"`
					AppEntityStatus        string    `json:"appEntityStatus"`
					AppConfrNumber         string    `json:"appConfrNumber"`
					LastUpdatedTimestamp   time.Time `json:"lastUpdatedTimestamp"`
					AppAttrDockNumberFacet string    `json:"appAttrDockNumberFacet"`
					AppEntityStatusFacet   string    `json:"appEntityStatusFacet"`
					AppCustNumberFacet     string    `json:"appCustNumberFacet"`
					Version                int64     `json:"_version_"`
					FirstInventorFileFacet string    `json:"firstInventorFileFacet"`
					AppLocationFacet       string    `json:"appLocationFacet"`
					AppEarlyPubNumberFacet string    `json:"appEarlyPubNumberFacet"`
					PatentNumberFacet      string    `json:"patentNumberFacet"`
				} `json:"docs"`
			} `json:"response"`
		} `json:"searchResponse"`
		QueryID string `json:"queryId"`
	} `json:"queryResults"`
	JobStatus          interface{} `json:"jobStatus"`
	QueryID            string      `json:"queryId"`
	Page               int         `json:"page"`
	Count              int         `json:"count"`
	CreateQueryRequest struct {
		SearchText       string      `json:"searchText"`
		Facet            string      `json:"facet"`
		FacetField       interface{} `json:"facetField"`
		FacetLimit       interface{} `json:"facetLimit"`
		FacetMissing     interface{} `json:"facetMissing"`
		FacetDate        interface{} `json:"facetDate"`
		FacetDateGap     interface{} `json:"facetDateGap"`
		FacetDateStart   interface{} `json:"facetDateStart"`
		FacetDateEnd     interface{} `json:"facetDateEnd"`
		FacetDateOther   interface{} `json:"facetDateOther"`
		FacetDateInclude interface{} `json:"facetDateInclude"`
		Mm               string      `json:"mm"`
		Sort             string      `json:"sort"`
		Qf               string      `json:"qf"`
		Wt               interface{} `json:"wt"`
		Df               interface{} `json:"df"`
		Fl               string      `json:"fl"`
		Start            string      `json:"start"`
		Fq               interface{} `json:"fq"`
		Rows             interface{} `json:"rows"`
		Parameters       struct {
			Mm    string   `json:"mm"`
			Qf    string   `json:"qf"`
			Fl    []string `json:"fl"`
			Start string   `json:"start"`
			Sort  string   `json:"sort"`
			Rows  int      `json:"rows"`
			Facet string   `json:"facet"`
		} `json:"parameters"`
	} `json:"createQueryRequest"`
	Links []struct {
		Rel  string `json:"rel"`
		Href string `json:"href"`
	} `json:"links"`
}

type Query struct {
	SearchText string `json:"searchText"`
	Fl         string `json:"fl"`
	Mm         string `json:"mm"`
	Qf         string `json:"qf"`
	Facet      string `json:"facet"`
	Sort       string `json:"sort"`
	Start      string `json:"start"`
}

func get_ApplId(publNo, queryKind string) string {
	searchText := queryKind + ":(" + publNo + ")"
	query := Query{
		SearchText: searchText,
		Fl:         "*",
		Mm:         "20",
		Qf: `appEarlyPubNumber applId appLocation appType appStatus_txt appConfrNumber appCustNumber appGrpArtNumber 
		appCls appSubCls appEntityStatus_txt patentNumber patentTitle primaryInventor firstNamedApplicant appExamName 
		appExamPrefrdName appAttrDockNumber appPCTNumber appIntlPubNumber wipoEarlyPubNumber pctAppType firstInventorFile 
		appClsSubCls rankAndInventorsList`,
		Facet: "false",
		Sort:  "applId asc",
		Start: "0",
	}

	json_data, err := json.Marshal(query)
	if err != nil {
		log.Fatal(err)
	}
	resp, err := http.Post("https://ped.uspto.gov/api/queries", "application/json",
		bytes.NewBuffer(json_data))

	if err != nil {
		fmt.Println(err)
	}
	defer resp.Body.Close()
	body, readErr := ioutil.ReadAll(resp.Body)
	if readErr != nil {
		fmt.Println(err)
	}

	var res AutoGenerated

	err = json.Unmarshal(body, &res)
	if err != nil {
		fmt.Println(err)
	}

	applId := res.QueryResults.SearchResponse.Response.Docs[0].ApplID
	fmt.Println(applId)
	return applId
}

func getLatestClaims(applIdExt, savePath string) {
	applId := applIdExt
	url_list_files := "https://ped.uspto.gov/api/queries/cms/public/"
	comb_url_list := url_list_files + applId

	res, err := http.Get(comb_url_list)
	if err != nil {
		log.Fatal(err)
	}
	defer res.Body.Close()

	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		log.Fatal(err)
	}
	var documents []Document
	err = json.Unmarshal(
		body,
		&documents,
	)
	if err != nil {

	}

	var maxDate time.Time
	var maxI int
	for i := 0; i < len(documents); i++ {
		if documents[i].DocDesc == "Claims" {
			fmt.Println(documents[i])
			if documents[i].MRDate.After(maxDate) {
				fmt.Println("Plopp")
				maxDate = documents[i].MRDate
				maxI = i
			} else if documents[i].MRDate.Equal(maxDate) {
				fmt.Println("Second of claims at identical date found!!")
			}
		}
	}
	fmt.Println(maxDate)
	fmt.Println(maxI)
	fmt.Println(documents[maxI])
	claims_url := "https://ped.uspto.gov/api/queries/cms/" + documents[maxI].PdfURL
	resp, err := grab.Get(savePath, claims_url)
	if err != nil {
		log.Fatal(err)
	}
	filename := savePath + "/" + documents[maxI].ApplId + "_" + documents[maxI].MRDate.Format("20060101") + "_latest_claims.pdf"
	fmt.Println(filename)
	os.Rename(resp.Filename, filename)

}

func discNumber(docNo, queryKind, savePath string) {
	if queryKind == "applId" {
		getLatestClaims(docNo, savePath)
	} else {
		applId := get_ApplId(docNo, queryKind)
		getLatestClaims(applId, savePath)
	}
}
